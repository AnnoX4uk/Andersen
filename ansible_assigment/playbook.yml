---
  - name         : Install zoo_app
    hosts        : all
    become       : yes
    become_method: su
    become_user  : root

    tasks:
    
    - name: Copy public key
      authorized_key:
        user: "{{ lookup('env','USER') }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    - name: Set sshd authentification metod to public-key only.
      lineinfile: 
        dest: /etc/ssh/sshd_config 
        regexp: '^#?AuthenticationMethods' 
        line: 'AuthenticationMethods publickey'

    - name: Disable sshd password base authentification
      lineinfile: 
        dest: /etc/ssh/sshd_config 
        regexp: '^#?PasswordAuthentication' 
        line: 'PasswordAuthentication no'

    - name: Enable sshd public-key authentification
      lineinfile: 
        dest: /etc/ssh/sshd_config 
        regexp: '^#?PubkeyAuthentication'
        line: 'PubkeyAuthentication yes'

    - name: Permit RootLogin
      lineinfile: 
        dest: /etc/ssh/sshd_config 
        regexp: '^PermitRootLogin'
        line: 'PermitRootLogin No'

    - name: Reload sshd to apply config
      service: 
        name: sshd
        state: reloaded

    - name: Install packages - pip, nginx, iptables 
      apt:
        pkg:
          - python3-pip
          - nginx
          - iptables
        state: present
        update_cache: no

    - name: Install flask
      pip:
        name: flask
        executable: pip3
        state: present

    - name: Install emoji module
      pip:
        name: emoji
        executable: pip3
        state: present

    - name: Remove default nginx config
      file:
        state: absent
        path: /etc/nginx/sites-enabled/default

    - name: Creating nginx zoo_app config
      copy:
        dest: "/etc/nginx/sites-available/zoo_app"
        mode: 0644
        owner: root
        content: |
          server {
            listen 80 default_server;
            location / {
              proxy_pass http://127.0.0.1:8080;
             }
          }

    - name: Create symlink for zoo_app to sites-enabled
      file:
        src: /etc/nginx/sites-available/zoo_app
        dest: /etc/nginx/sites-enabled/zoo_app
        state: link

    - name: Check /opt directory exists
      stat:
        path: /opt
      register: check_opt

    - name: Create /opt dir
      file:
        path: /opt
        state: directory
        owner: root
        mode: 0755
      when: not check_opt.stat.exists

    - name: Copy zoo_app to /opt directory
      copy:
        src: "{{ playbook_dir }}/zoo_app"
        dest: /opt/
        owner: root
        mode: 0755

    - name: Creating systemd service
      copy:
        dest: "/etc/systemd/system/zoo_app.service"
        mode: 0644
        owner: root
        content: |
          [Unit]
          Description=ROT13 demo service
          After=network.target
          StartLimitIntervalSec=0
          [Service]
          Type=simple
          Restart=always
          RestartSec=1
          User=root
          ExecStart=/usr/bin/python3 /opt/zoo_app
          [Install]
          WantedBy=multi-user.target
    
    - name: Enable zoo_app service
      service: 
        name : zoo_app.service 
        enabled: yes
    
    - name: Start zoo_app service
      service: 
        name: zoo_app.service 
        state: started

    - name: Enable nginx service
      service: 
        name : nginx.service 
        enabled: yes    
    
    - name: Restart nginx to apply config
      service:
        name: nginx
        state: restarted
        enabled: yes

    - name : Allow incoming ESTABLISHED and RELATED
      iptables:
        chain: INPUT
        ctstate: ESTABLISHED,RELATED
        jump: ACCEPT
      become: yes

    - name : Allow incoming from localhost
      iptables:
        chain: INPUT
        source: 127.0.0.1
        jump: ACCEPT
        comment: Accept all from localhost.
      become: yes  
   
    - name : Allow incoming ssh
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 22
        ctstate: NEW
        syn: match
        jump: ACCEPT
        comment: Accept new SSH connections.
      become: yes

    - name : Allow incoming HTTP
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 80
        ctstate: NEW
        syn: match
        jump: ACCEPT
        comment: Accept new HTTP connections.
      become: yes
      
    - name : Allow incoming HTTPS
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 443
        ctstate: NEW
        syn: match
        jump: ACCEPT
        comment: Accept new HTTP connections.
      become: yes
      

    - name: Drop not accepted input
      iptables:
        chain: INPUT
        jump: DROP
        comment: Drop all incoming.
      become: yes

    # Default iptables module can't save rules
    - name: Save iptable rules
      shell:
        cmd: /usr/sbin/iptables-save > /etc/iptables.up.rules
    
    - name: Create iptables autostart rules
      copy:
        dest: "/etc/network/if-up.d/iptables-restore"
        mode: 0744
        owner: root
        content: |
          #!/bin/bash
          /usr/sbin/iptables-restore < /etc/iptables.up.rules
